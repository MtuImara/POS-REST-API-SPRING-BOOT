package pos.gescom.restApi.fichiersExploitations.stocks.stock;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import pos.gescom.restApi.constantes.StaticListOfValues;
import pos.gescom.restApi.constantes.StaticValue;
import pos.gescom.restApi.depotStockage.DepotStockageDto;
import pos.gescom.restApi.depotStockage.DepotStockageMapper;
import pos.gescom.restApi.fichiersExploitations.exercice.ExerciceMapper;
import pos.gescom.restApi.fichiersExploitations.fournisseurs.FournisseursMapper;
import pos.gescom.restApi.fichiersExploitations.stocks.stockDetail.StockDetailDto;
import pos.gescom.restApi.fichiersExploitations.stocks.stockDetail.StockDetailEntity;
import pos.gescom.restApi.fichiersExploitations.stocks.stockDetail.StockDetailMapper;
import pos.gescom.restApi.fichiersExploitations.stocks.stockDetail.StockDetailRepository;
import pos.gescom.restApi.fichiersExploitations.stocks.stockDetail.StockDetailService;
import pos.gescom.restApi.helpers.DateHelper;
import pos.gescom.restApi.helpers.PagingAndSortingHelper;

@Service
@RequiredArgsConstructor
public class StockService {

    private final StockRepository stockRepository;

    private final StockDetailService stockDetailService;

    private final StockDetailRepository stockDetailRepository;

    public List<StaticValue> typeDeMouvements() {

        StaticListOfValues StaticListOfValues = new StaticListOfValues();
        List<StaticValue> list_of_values = StaticListOfValues.getTypeDeMouvementDuStock();

        return list_of_values;
    }

    public List<StaticValue> typeStatut() {

        StaticListOfValues StaticListOfValues = new StaticListOfValues();
        List<StaticValue> list_of_values = StaticListOfValues.getTypeStatut();

        return list_of_values;
    }

    /* Visualiser tous les mouvements sans tenir compte de l'exercice comptable */
    public Map<String, Object> getAll(String title, int page, int size, String[] sort) {

        Pageable pagingSort = PagingAndSortingHelper.pagination(sort, page, size);

        Page<StockEntity> entity = new PageImpl<>(new ArrayList<>());

        if (title == null || title.equals("")) {
            entity = stockRepository.findAll(pagingSort);
        } else {
        }

        List<StockDto> dtos = new ArrayList<>();

        entity.forEach(h -> {

            StockDto dto = new StockDto();

            /* Debut Methode pour faire appel aux données statiques */

            StaticValue staticValMvt = new StaticValue();
            StaticListOfValues listOfValuesMvt = new StaticListOfValues();
            staticValMvt.setKey(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getKey().trim());
            staticValMvt.setValue(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getValue());

            StaticValue staticValStatut = new StaticValue();
            StaticListOfValues listOfValuesStatut = new StaticListOfValues();
            staticValStatut.setKey(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getKey().trim());
            staticValStatut.setValue(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getValue());

            /* fin Methode pour faire appel aux données statiques */

            dto.setId(h.getId());
            dto.setCode(h.getCode());

            if (h.getDateOperation() != null) {
                dto.setDateOperation(DateHelper.toText(h.getDateOperation(), "time"));
            } else {
                dto.setDateOperation(null);
            }

            if (h.getDepotDeDepart() != null) {
                dto.setDepotDeDepart(DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDepart()));
            }
            if (dto.getDepotDeDestination() != null) {
                dto.setDepotDeDestination(
                        DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDestination()));
            }
            if (h.getExercice() != null) {
                dto.setExercice(ExerciceMapper.getInstance().toDto(h.getExercice()));
            }
            dto.setTypeOperation(staticValMvt);
            dto.setTypeStatut(staticValStatut);
            dto.setCommentaire(h.getCommentaire());
            dto.setReferenceOperation(h.getReferenceOperation());
            if (h.getIdFournisseur() != null) {
                dto.setFournisseur(FournisseursMapper.getInstance().convertToDto(h.getFournisseur()));
            } else {
                dto.setFournisseur(null);
            }
            if (h.getStockDetail() != null) {
                dto.setStockDetail(stockDetailService.getAllOperationsDeStockDetailByIdOperation(h.getId()));
            }

            dto.setDateCreation(DateHelper.toText(h.getDateCreation(), "time"));
            dto.setDateModification(DateHelper.toText(h.getDateModification(), "time"));

            dtos.add(dto);

        });

        Map<String, Object> data = PagingAndSortingHelper.filteredAndSortedResult(
                entity.getNumber(),
                entity.getTotalElements(),
                entity.getTotalPages(),
                dtos);

        return data;
    }

    /* Visualiser un mouvement A partir de l'Id */
    public StockDto getById(int id) {

        StockEntity h = null;
        try {

            h = stockRepository.getReferenceById(id);

            StockDto dto = StockMapper.getInstance()
                    .convertToDto(h);

            /* Debut Methode pour faire appel aux données statiques */

            StaticValue staticValMvt = new StaticValue();
            StaticListOfValues listOfValuesMvt = new StaticListOfValues();
            staticValMvt.setKey(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getKey().trim());
            staticValMvt.setValue(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getValue());

            StaticValue staticValStatut = new StaticValue();
            StaticListOfValues listOfValuesStatut = new StaticListOfValues();
            staticValStatut.setKey(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getKey().trim());
            staticValStatut.setValue(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getValue());

            /* fin Methode pour faire appel aux données statiques */

            dto.setId(h.getId());
            dto.setCode(h.getCode());

            if (h.getDateOperation() != null) {
                dto.setDateOperation(DateHelper.toText(h.getDateOperation(), "time"));
            } else {
                dto.setDateOperation(null);
            }

            if (h.getDepotDeDepart() != null) {
                dto.setDepotDeDepart(DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDepart()));
            }
            if (dto.getDepotDeDestination() != null) {
                dto.setDepotDeDestination(
                        DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDestination()));
            }
            if (h.getExercice() != null) {
                dto.setExercice(ExerciceMapper.getInstance().toDto(h.getExercice()));
            }
            dto.setTypeOperation(staticValMvt);
            dto.setTypeStatut(staticValStatut);
            dto.setCommentaire(h.getCommentaire());
            dto.setReferenceOperation(h.getReferenceOperation());
            if (h.getIdFournisseur() != null) {
                dto.setFournisseur(FournisseursMapper.getInstance().convertToDto(h.getFournisseur()));
            } else {
                dto.setFournisseur(null);
            }
            if (h.getStockDetail() != null) {
                dto.setStockDetail(stockDetailService.getAllOperationsDeStockDetailByIdOperation(h.getId()));
            }

            dto.setDateCreation(DateHelper.toText(h.getDateCreation(), "time"));
            dto.setDateModification(DateHelper.toText(h.getDateModification(), "time"));

            return dto;

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return null;
        }
    }

    /* Visualiser tous les mouvement A partir de l'exercice comptable */
    public Map<String, Object> getAllByIdExerciceComptable(String title, int page, int size, String[] sort,
            int idExercice) {

        Pageable pagingSort = PagingAndSortingHelper.pagination(sort, page, size);

        Page<StockEntity> entity = new PageImpl<>(new ArrayList<>());

        if (title == null || title.equals("")) {
            entity = stockRepository.getByExerciceComptable(pagingSort, idExercice);
        } else {
        }

        List<StockDto> dtos = new ArrayList<>();

        entity.forEach(h -> {

            StockDto dto = new StockDto();

            /* Debut Methode pour faire appel aux données statiques */

            StaticValue staticValMvt = new StaticValue();
            StaticListOfValues listOfValuesMvt = new StaticListOfValues();
            staticValMvt.setKey(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getKey().trim());
            staticValMvt.setValue(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getValue());

            StaticValue staticValStatut = new StaticValue();
            StaticListOfValues listOfValuesStatut = new StaticListOfValues();
            staticValStatut.setKey(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getKey().trim());
            staticValStatut.setValue(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getValue());

            /* fin Methode pour faire appel aux données statiques */

            dto.setId(h.getId());
            dto.setCode(h.getCode());

            if (h.getDateOperation() != null) {
                dto.setDateOperation(DateHelper.toText(h.getDateOperation(), "time"));
            } else {
                dto.setDateOperation(null);
            }

            if (h.getDepotDeDepart() != null) {
                dto.setDepotDeDepart(DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDepart()));
            }
            if (dto.getDepotDeDestination() != null) {
                dto.setDepotDeDestination(
                        DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDestination()));
            }
            if (h.getExercice() != null) {
                dto.setExercice(ExerciceMapper.getInstance().toDto(h.getExercice()));
            }
            dto.setTypeOperation(staticValMvt);
            dto.setTypeStatut(staticValStatut);
            dto.setCommentaire(h.getCommentaire());
            dto.setReferenceOperation(h.getReferenceOperation());
            if (h.getIdFournisseur() != null) {
                dto.setFournisseur(FournisseursMapper.getInstance().convertToDto(h.getFournisseur()));
            } else {
                dto.setFournisseur(null);
            }
            if (h.getStockDetail() != null) {
                dto.setStockDetail(stockDetailService.getAllOperationsDeStockDetailByIdOperation(h.getId()));
            }

            dto.setDateCreation(DateHelper.toText(h.getDateCreation(), "time"));
            dto.setDateModification(DateHelper.toText(h.getDateModification(), "time"));

            dtos.add(dto);

        });

        Map<String, Object> data = PagingAndSortingHelper.filteredAndSortedResult(
                entity.getNumber(),
                entity.getTotalElements(),
                entity.getTotalPages(),
                dtos);

        return data;
    }

    /* Visualiser un mouvement A partir de son Id et de l'exercice comptable */
    public List<StockDto> getAllByIdEtIdExerciceComptable(int id, int idExercice) {

        List<StockEntity> entity = stockRepository.getByIdEtExerciceComptable(id,
                idExercice);

        List<StockDto> dtos = new ArrayList<>();

        StockDto dto = new StockDto();

        entity.forEach(h -> {

            /* Debut Methode pour faire appel aux données statiques */

            StaticValue staticValMvt = new StaticValue();
            StaticListOfValues listOfValuesMvt = new StaticListOfValues();
            staticValMvt.setKey(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getKey().trim());
            staticValMvt.setValue(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getValue());

            StaticValue staticValStatut = new StaticValue();
            StaticListOfValues listOfValuesStatut = new StaticListOfValues();
            staticValStatut.setKey(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getKey().trim());
            staticValStatut.setValue(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getValue());

            /* fin Methode pour faire appel aux données statiques */

            dto.setId(h.getId());
            dto.setCode(h.getCode());

            if (h.getDateOperation() != null) {
                dto.setDateOperation(DateHelper.toText(h.getDateOperation(), "time"));
            } else {
                dto.setDateOperation(null);
            }

            if (h.getDepotDeDepart() != null) {
                dto.setDepotDeDepart(DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDepart()));
            }
            if (dto.getDepotDeDestination() != null) {
                dto.setDepotDeDestination(
                        DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDestination()));
            }
            if (h.getExercice() != null) {
                dto.setExercice(ExerciceMapper.getInstance().toDto(h.getExercice()));
            }
            dto.setTypeOperation(staticValMvt);
            dto.setTypeStatut(staticValStatut);
            dto.setCommentaire(h.getCommentaire());
            dto.setReferenceOperation(h.getReferenceOperation());
            if (h.getIdFournisseur() != null) {
                dto.setFournisseur(FournisseursMapper.getInstance().convertToDto(h.getFournisseur()));
            } else {
                dto.setFournisseur(null);
            }
            if (h.getStockDetail() != null) {
                dto.setStockDetail(stockDetailService.getAllOperationsDeStockDetailByIdOperation(h.getId()));
            }

            dto.setDateCreation(DateHelper.toText(h.getDateCreation(), "time"));
            dto.setDateModification(DateHelper.toText(h.getDateModification(), "time"));

            dtos.add(dto);

        });

        return dtos;
    }

    /* Visualiser par Type de mouvement A partir de l'exercice comptable */
    public Map<String, Object> getAllByTypeMouvementAndIdExerciceComptable(String title, int page, int size,
            String[] sort, int idExercice, int typeMouvement) {

        Pageable pagingSort = PagingAndSortingHelper.pagination(sort, page, size);

        Page<StockEntity> entity = new PageImpl<>(new ArrayList<>());

        if (title == null || title.equals("")) {
            entity = stockRepository.getByTypeDeMouvementEtExerciceComptable(pagingSort,
                    idExercice, typeMouvement);
        } else {
        }

        List<StockDto> dtos = new ArrayList<>();

        entity.forEach(h -> {

            StockDto dto = new StockDto();

            /* Debut Methode pour faire appel aux données statiques */

            StaticValue staticValMvt = new StaticValue();
            StaticListOfValues listOfValuesMvt = new StaticListOfValues();
            staticValMvt.setKey(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getKey().trim());
            staticValMvt.setValue(
                    listOfValuesMvt.getTypeDeMouvementDuStock().get(h.getTypeOperation() - 1)
                            .getValue());

            StaticValue staticValStatut = new StaticValue();
            StaticListOfValues listOfValuesStatut = new StaticListOfValues();
            staticValStatut.setKey(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getKey().trim());
            staticValStatut.setValue(
                    listOfValuesStatut.getTypeStatut().get(h.getTypeStatut() - 1).getValue());

            /* fin Methode pour faire appel aux données statiques */

            dto.setId(h.getId());
            dto.setCode(h.getCode());

            if (h.getDateOperation() != null) {
                dto.setDateOperation(DateHelper.toText(h.getDateOperation(), "time"));
            } else {
                dto.setDateOperation(null);
            }

            if (h.getDepotDeDepart() != null) {
                dto.setDepotDeDepart(DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDepart()));
            }
            if (dto.getDepotDeDestination() != null) {
                dto.setDepotDeDestination(
                        DepotStockageMapper.getInstance().convertToDto(h.getDepotDeDestination()));
            }
            if (h.getExercice() != null) {
                dto.setExercice(ExerciceMapper.getInstance().toDto(h.getExercice()));
            }
            dto.setTypeOperation(staticValMvt);
            dto.setTypeStatut(staticValStatut);
            dto.setCommentaire(h.getCommentaire());
            dto.setReferenceOperation(h.getReferenceOperation());
            if (h.getIdFournisseur() != null) {
                dto.setFournisseur(FournisseursMapper.getInstance().convertToDto(h.getFournisseur()));
            } else {
                dto.setFournisseur(null);
            }
            if (h.getStockDetail() != null) {
                dto.setStockDetail(stockDetailService.getAllOperationsDeStockDetailByIdOperation(h.getId()));
            }

            dto.setDateCreation(DateHelper.toText(h.getDateCreation(), "time"));
            dto.setDateModification(DateHelper.toText(h.getDateModification(), "time"));

            dtos.add(dto);

        });

        Map<String, Object> data = PagingAndSortingHelper.filteredAndSortedResult(
                entity.getNumber(),
                entity.getTotalElements(),
                entity.getTotalPages(),
                dtos);

        return data;
    }

    public StockDto ajoutMouvementsDeStockService(StockDto dto) {

        try {
            StockEntity entity = new StockEntity();
            entity = StockMapper.getInstance()
                    .convertToEntity(dto);

            entity.setDateCreation(DateHelper.now());

            StockEntity creation = stockRepository
                    .save(entity);

            /* Enregistrement automatique des détails du mouvement */

            List<StockDetailDto> reglement_details = dto.getStockDetail();

            for (StockDetailDto reglement_detail : reglement_details) {

                StockDetailEntity detailEntity = StockDetailMapper.getInstance()
                        .convertToEntity(reglement_detail);

                detailEntity.setIdStock(entity.getId());

                stockDetailRepository.save(detailEntity);
            }

            /* Fin Enregistrement automatique des détails du mouvement */

            dto = creation != null
                    ? StockMapper.getInstance()
                            .convertToDto(creation)
                    : null;
        } catch (Exception ex) {
            dto = null;
            System.out.println("null" + ex.getMessage());
        }

        return dto;
    }

    public StockDto updateMouvementsDeStockService(int id,
            StockDto updated) {
        StockEntity converted_Entity, updated_Entity = null;
        try {

            StockDto getById = getById(id);
            converted_Entity = StockMapper.getInstance()
                    .convertToEntity(getById.modifyValues(updated));

            converted_Entity.setDateModification(DateHelper.now());

            updated_Entity = stockRepository
                    .save(converted_Entity);

            /* Enregistrement automatique des détails du mouvement */

            List<StockDetailDto> reglement_details = updated.getStockDetail();

            for (StockDetailDto reglement_detail : reglement_details) {

                StockDetailEntity rfd = StockDetailMapper.getInstance()
                        .convertToEntity(reglement_detail);

                rfd.setIdStock(updated_Entity.getId());

                stockDetailRepository.save(rfd);
            }

            /* Fin Enregistrement automatique des détails du mouvement */
            updated = StockMapper.getInstance()
                    .convertToDto(updated_Entity);

        } catch (Exception e) {
            System.out.println("Erreur lors de la modification: " + e.getMessage());
            updated = null;
        }

        return updated;
    }

}
