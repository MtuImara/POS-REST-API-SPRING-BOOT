package pos.gescom.restApi.fichiersExploitations.exercice;

import jakarta.validation.ConstraintViolationException;
import pos.gescom.restApi.helpers.DateHelper;
import pos.gescom.restApi.helpers.MessageHelper;
import pos.gescom.restApi.helpers.ResponseHelper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/exercices")
public class ExerciceController {

  @Autowired
  private ExcerciceService excService;

  @Autowired
  private ExcerciceService exerciceService;

  @GetMapping(value = "/")
  public ResponseEntity<Object> getAll(@RequestParam(required = false) String title,
      @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size,
      @RequestParam(defaultValue = "id,desc") String[] sort) {

    Map<String, Object> cmptExerciceDtos = excService.getAlls(title, page, size, sort);
    if (cmptExerciceDtos.isEmpty()) {
      return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound(), false), HttpStatus.NOT_FOUND);
    }
    return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), cmptExerciceDtos, true), HttpStatus.OK);
  }

  @GetMapping(value = "/{id}")
  public ResponseEntity<Object> getById(@PathVariable(name = "id", required = true) int id) {

    ExerciceDto exercice = excService.getById(id);
    if (exercice != null) {
      return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), exercice, true), HttpStatus.OK);
    } else {
      return new ResponseEntity<>(new ResponseHelper(MessageHelper.noContent(), true), HttpStatus.NO_CONTENT);
    }
  }

  @GetMapping(value = "/exercice/{id}")
  public ResponseEntity<ExerciceDto> getByIdByservice(@PathVariable(name = "id", required = true) int id) {

    ExerciceDto exercice = excService.getById(id);
    if (exercice != null) {
      return new ResponseEntity<>(exercice, HttpStatus.OK);
    } else {
      return new ResponseEntity<>(new ExerciceDto(), HttpStatus.NO_CONTENT);
    }
  }

  @GetMapping(value = "/exercice")
  public ResponseEntity<List<ExerciceDto>> getAllBymicroservices() {

    List<ExerciceDto> exercice = excService.getAll();
    if (exercice != null) {
      return new ResponseEntity<>(exercice, HttpStatus.OK);
    } else {
      return new ResponseEntity<>(new ArrayList<>(), HttpStatus.NO_CONTENT);
    }
  }

  @PostMapping(value = "/")
  public ResponseEntity<Object> add(@RequestBody ExerciceDto recordExercice) {

    ExerciceDto exercicePrecedent = null;
    ExerciceDto getByCode = null;
    ExerciceDto firstExercice = exerciceService.getFirst();
    String previousDateFin = "";
    if (recordExercice.getExercicePrecedent() != null) {
      exercicePrecedent = exerciceService.getById(recordExercice.getExercicePrecedent().getId());
      if (exercicePrecedent == null) {
        return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound("Exercice precedent"), "", false),
            HttpStatus.NOT_FOUND);
      }

    } else {
      if (firstExercice != null) {
        recordExercice.setExercicePrecedent(exerciceService.getLast());
      }
    }

    if (recordExercice.getCode() != null) {
      getByCode = exerciceService.getByCode(recordExercice.getCode());

    }

    if (getByCode != null) {
      return new ResponseEntity<>(
          new ResponseHelper(MessageHelper.error("Le code exercice est deja utilise par un autre"), "",
              false),
          HttpStatus.NOT_ACCEPTABLE);
    }

    if (recordExercice.getDateDebut() == null || recordExercice.getDateFin() == null) {
      return new ResponseEntity<>(
          new ResponseHelper(MessageHelper.error("Le date debut et la date de fin sont obligatoires"), "",
              false),
          HttpStatus.NOT_ACCEPTABLE);
    }

    Long checkDate = DateHelper.diffInDay(recordExercice.getDateDebut(), recordExercice.getDateFin());

    if (checkDate < 0) {
      return new ResponseEntity<>(
          new ResponseHelper(MessageHelper.error("Le date debut doit etre anteririeure a la date fin"), "",
              false),
          HttpStatus.NOT_ACCEPTABLE);
    }

    if (checkDate < 363) {
      return new ResponseEntity<>(new ResponseHelper(
          MessageHelper.error("La duree  de l'exercice comptable ne doit pas etre inferieur a une annee"), "",
          false), HttpStatus.NOT_ACCEPTABLE);
    }

    if (checkDate > 365) {
      return new ResponseEntity<>(new ResponseHelper(
          MessageHelper.error("La duree  de l'exercice comptable ne doit pas etre superieure a une annee"),
          "", false), HttpStatus.NOT_ACCEPTABLE);
    }

    previousDateFin = exerciceService.getLast() != null ? exerciceService.getLast().getDateFin() : "";

    if (previousDateFin != null && !previousDateFin.equals("")) {
      Long checkDateInterval = DateHelper.diffInDay(previousDateFin, recordExercice.getDateDebut());

      if (checkDateInterval <= 0) {
        return new ResponseEntity<>(new ResponseHelper(
            MessageHelper.error("L'exercice ne doit pas etre dans l'intervalle d'une autre exercice"), "",
            false), HttpStatus.NOT_ACCEPTABLE);
      }
    }

    ExerciceDto created = exerciceService.create(recordExercice);
    return new ResponseEntity<>(new ResponseHelper(MessageHelper.createdSuccessfully("Exercice"), null, true),
        HttpStatus.OK);
  }

  @PutMapping(value = "/{id}")
  public ResponseEntity<Object> update(@PathVariable(name = "id", required = true) Integer id,
      @RequestBody ExerciceDto recordExercice) {
    ExerciceDto exercicePrecedent = null;
    ExerciceDto getExercice = exerciceService.getById(id);

    if (getExercice == null) {
      return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound("Exercice"), getExercice, false),
          HttpStatus.NOT_FOUND);
    }

    if (recordExercice.getExercicePrecedent() != null) {
      exercicePrecedent = excService.getById(recordExercice.getExercicePrecedent().getId());
      if (exercicePrecedent == null) {
        return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound("Exercice precedent"), "", false),
            HttpStatus.NOT_FOUND);
      }

      if (id <= exercicePrecedent.getId()) {
        return new ResponseEntity<>(new ResponseHelper(MessageHelper.error(
            "L'exercice precedent doit etre anterieure a l'exercice '" + getExercice.getDesignation())
            + "'", "", false), HttpStatus.NOT_ACCEPTABLE);
      }

    }

    if (recordExercice.getCode() != null) {
      ExerciceDto getByCode = exerciceService.getByCode(recordExercice.getCode());
      if (getByCode != null && !getExercice.getCode().equalsIgnoreCase(recordExercice.getCode())) {
        return new ResponseEntity<>(
            new ResponseHelper(MessageHelper.error("Le code exercice est deja utilise par un autre"), "",
                false),
            HttpStatus.NOT_ACCEPTABLE);
      }

    }

    String dateDebut = getExercice.getDateDebut();
    String dateFin = getExercice.getDateFin();
    if (recordExercice.getDateDebut() != null) {
      dateDebut = recordExercice.getDateDebut();
    }
    if (recordExercice.getDateFin() != null) {
      dateFin = recordExercice.getDateFin();
    }
    if (dateDebut == null || dateFin == null) {
      return new ResponseEntity<>(
          new ResponseHelper(MessageHelper.error("Le date debut et la date de fin sont obligatoires"), "",
              false),
          HttpStatus.NOT_ACCEPTABLE);
    }

    Long checkDate = DateHelper.diffInDay(dateDebut, dateFin);
    if (checkDate < 0) {
      return new ResponseEntity<>(
          new ResponseHelper(MessageHelper.error("Le date debut doit etre anteririeure a la date fin"), "",
              false),
          HttpStatus.NOT_ACCEPTABLE);
    }

    if (checkDate < 363) {
      return new ResponseEntity<>(new ResponseHelper(
          MessageHelper.error("La duree  de l'exercice comptable ne doit pas etre inferieur a une annee"), "",
          false), HttpStatus.NOT_ACCEPTABLE);
    }

    if (checkDate > 365) {
      return new ResponseEntity<>(new ResponseHelper(
          MessageHelper.error("La duree  de l'exercice comptable ne doit pas etre superieure a une annee"),
          "", false), HttpStatus.NOT_ACCEPTABLE);
    }

    String previousDateFin = exerciceService.getLast() != null ? exerciceService.getLast().getDateFin() : "";
    String changeDateDebutFormat = DateHelper.toText(DateHelper.toDate(getExercice.getDateDebut()));
    String changeDateFinFormat = DateHelper.toText(DateHelper.toDate(getExercice.getDateFin()));
    boolean compareDate = changeDateFinFormat.equals(recordExercice.getDateFin());

    if (previousDateFin != null && !previousDateFin.equals("")) {

      if (!recordExercice.getDateDebut().equals(changeDateDebutFormat)
          || !recordExercice.getDateFin().equals(changeDateFinFormat)) {
        Long checkDateInterval = DateHelper.diffInDay(previousDateFin, dateDebut);

        if (checkDateInterval <= 0) {
          return new ResponseEntity<>(new ResponseHelper(
              MessageHelper.error("L'exercice ne doit pas etre dans l'intervalle d'une autre exercice "),
              "", false), HttpStatus.NOT_ACCEPTABLE);
        }
      }

    }

    ExerciceDto exercice = excService.update(id, recordExercice);
    return new ResponseEntity<>(new ResponseHelper(MessageHelper.updatedSuccessfully("Exercice"), exercice, true),
        HttpStatus.OK);
  }

  // @DeleteMapping(value = "/{id}")
  // public ResponseEntity<Object> delete(@PathVariable(name = "id", required =
  // true) int id)
  // throws ConstraintViolationException, NotFoundException {

  // try {
  // boolean h = excService.delete(id);
  // return h ? new ResponseEntity<>(new ResponseHelper(MessageHelper.success(),
  // true), HttpStatus.OK)
  // : new ResponseEntity<>(new ResponseHelper(MessageHelper.notAcceptable(),
  // false),
  // HttpStatus.UNAUTHORIZED);
  // } catch (Exception e) {
  // return new ResponseEntity<>(new
  // ResponseHelper(MessageHelper.internalServer("" + e.getMessage())),
  // HttpStatus.INTERNAL_SERVER_ERROR);
  // }
  // }
  @GetMapping(value = "/exercice_cloturer_liste")
  public ResponseEntity<Object> getexerciceCloturer() {

    List<ExerciceDto> data = excService.exerciceCloturerListes();
    try {
      if (!data.isEmpty()) {
        return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), data, true), HttpStatus.OK);
      } else {
        return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), data, false), HttpStatus.OK);
      }
    } catch (Exception e) {
      return new ResponseEntity<>(new ResponseHelper(MessageHelper.internalServer(), false),
          HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  @GetMapping(value = "/get_soldes_resultat")
  public ResponseEntity<Object> getExerciceResultat() {

    Map<String, Object> data = excService.exercicegetsoldes();

    try {
      if (data.size() > 0) {
        return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), data, true), HttpStatus.OK);
      } else {
        return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), data, false), HttpStatus.OK);
      }
    } catch (Exception e) {
      return new ResponseEntity<>(new ResponseHelper(MessageHelper.internalServer(), false),
          HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
}
