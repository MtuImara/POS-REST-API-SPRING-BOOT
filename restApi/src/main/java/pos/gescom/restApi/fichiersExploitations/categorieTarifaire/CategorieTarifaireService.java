package pos.gescom.restApi.fichiersExploitations.categorieTarifaire;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import pos.gescom.restApi.helpers.DateHelper;
import pos.gescom.restApi.helpers.PagingAndSortingHelper;

@Service
public class CategorieTarifaireService {

    @Autowired
    private CategorieTarifaireRepository tarifRepo;

    public Map<String, Object> getAll(String title, int page, int size, String[] sort,
            Specification<CategorieTarifaireEntity> spec) {

        Pageable pagingSort = PagingAndSortingHelper.pagination(sort, page, size);

        Page<CategorieTarifaireEntity> tarifEntity = null;

        if (title == null || title.equals("")) {
            tarifEntity = tarifRepo.findAll(spec, pagingSort);
        } else {
        }

        List<CategorieTarifaireDto> tarifDtos = new ArrayList<>();

        for (CategorieTarifaireEntity tarifEntities : tarifEntity) {
            tarifDtos.add(CategorieTarifaireMapper.getInstance().convertToDto(tarifEntities));
        }

        Map<String, Object> data = PagingAndSortingHelper.filteredAndSortedResult(
                tarifEntity.getNumber(),
                tarifEntity.getTotalElements(),
                tarifEntity.getTotalPages(),
                tarifDtos);

        return data;
    }

    // Methode pour reccupérer les Categories Tarifaires dans un autre microservice
    public List<CategorieTarifaireDto> getAllCategorieTarifaireFeignClient() {
        List<CategorieTarifaireEntity> tarifEntity = tarifRepo.findAll();
        List<CategorieTarifaireDto> dtos = new ArrayList<>();
        for (CategorieTarifaireEntity entities : tarifEntity) {
            dtos.add(CategorieTarifaireMapper.getInstance().convertToDto(entities));
        }
        return dtos;
    }

    public CategorieTarifaireDto getById(int id) {

        CategorieTarifaireEntity tarifEntity = null;
        try {
            tarifEntity = tarifRepo.getById(id);
            CategorieTarifaireDto tarifDto = CategorieTarifaireMapper.getInstance()
                    .convertToDto(tarifEntity);
            return tarifDto;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return null;
        }
    }

    public CategorieTarifaireDto ajoutCategorieTarifaireService(CategorieTarifaireDto tarifDto) {

        try {
            CategorieTarifaireEntity tarifEntity = new CategorieTarifaireEntity();
            tarifEntity = CategorieTarifaireMapper.getInstance().convertToEntity(tarifDto);
            tarifEntity.setDateCreation(DateHelper.now());
            CategorieTarifaireEntity creation = tarifRepo.save(tarifEntity);

            tarifDto = creation != null
                    ? CategorieTarifaireMapper.getInstance().convertToDto(creation)
                    : null;
        } catch (Exception ex) {
            tarifDto = null;
            System.out.println("null" + ex.getMessage());
        }

        return tarifDto;
    }

    public CategorieTarifaireDto updateFamilleArticleService(int id, CategorieTarifaireDto updated) {
        CategorieTarifaireEntity tarifEntity, updated_tarifEntity = null;
        try {

            CategorieTarifaireDto dto = getById(id);
            tarifEntity = CategorieTarifaireMapper.getInstance()
                    .convertToEntity(dto.modifyValues(updated));
            tarifEntity.setDateModification(DateHelper.now());
            updated_tarifEntity = tarifRepo.save(tarifEntity);
            updated = CategorieTarifaireMapper.getInstance().convertToDto(updated_tarifEntity);

        } catch (Exception e) {
            System.out.println("Erreur lors de la modification de la Catégorie Tarifaire: " + e.getMessage());
            updated = null;
        }

        return updated;
    }
}
