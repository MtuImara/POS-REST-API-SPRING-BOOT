package pos.gescom.restApi.fichiersExploitations.stocks.stock;

import org.springframework.stereotype.Component;

import pos.gescom.restApi.constantes.StaticListOfValues;
import pos.gescom.restApi.constantes.StaticValue;
import pos.gescom.restApi.depotStockage.DepotStockageMapper;
import pos.gescom.restApi.fichiersExploitations.exercice.ExerciceMapper;
import pos.gescom.restApi.helpers.DateHelper;

@Component
public class StockMapper {

    public StockMapper() {
    }

    public static StockMapper getInstance() {
        return new StockMapper();
    }

    public StockEntity convertToEntity(StockDto dto) {
        StockEntity entity = new StockEntity();

        entity.setId(dto.getId());
        entity.setCode(dto.getCode());
        entity.setReferenceOperation(dto.getReferenceOperation());
        if (dto.getTypeOperation() != null) {
            entity.setTypeOperation(Integer.parseInt(dto.getTypeOperation().getKey()));
        }
        if (dto.getTypeStatut() != null) {
            entity.setTypeStatut(Integer.parseInt(dto.getTypeStatut().getKey()));
        }
        if (dto.getDepotDeDepart() != null) {
            entity.setIdDepotDeDepart(dto.getDepotDeDepart().getId());
        }
        if (dto.getDepotDeDestination() != null) {
            entity.setIdDepotDeDestination(dto.getDepotDeDestination().getId());
        }
        if (dto.getExercice() != null) {
            entity.setIdExerciceComptable(dto.getExercice().getId());
        }
        if (dto.getFournisseur() != null) {
            entity.setIdFournisseur(dto.getFournisseur().getId());
        }
        entity.setDateOperation(DateHelper.toDate(dto.getDateOperation()));
        entity.setCommentaire(dto.getCommentaire());

        return entity;
    }

    public StockDto convertToDto(StockEntity entity) {

        StockDto dto = new StockDto();

        StaticValue staticValMvt = new StaticValue();
        StaticListOfValues listOfValuesMvt = new StaticListOfValues();
        staticValMvt.setKey(
                listOfValuesMvt.getTypeDeMouvementDuStock().get(entity.getTypeOperation() - 1).getKey().trim());
        staticValMvt.setValue(
                listOfValuesMvt.getTypeDeMouvementDuStock().get(entity.getTypeOperation() - 1).getValue());

        StaticValue staticValStatut = new StaticValue();
        StaticListOfValues listOfValuesStatut = new StaticListOfValues();
        staticValStatut.setKey(
                listOfValuesStatut.getTypeStatut().get(entity.getTypeStatut() - 1).getKey().trim());
        staticValStatut.setValue(
                listOfValuesStatut.getTypeStatut().get(entity.getTypeStatut() - 1).getValue());

        dto.setId(entity.getId());
        dto.setTypeOperation(staticValMvt);
        dto.setCode(entity.getCode());
        dto.setCommentaire(entity.getCommentaire());
        dto.setReferenceOperation(entity.getReferenceOperation());
        dto.setTypeStatut(staticValStatut);

        if (entity.getDateOperation() != null) {
            dto.setDateOperation(DateHelper.toText(entity.getDateOperation(), "time"));
        } else {
            dto.setDateOperation(null);
        }
        if (entity.getDepotDeDepart() != null) {
            dto.setDepotDeDepart(DepotStockageMapper.getInstance().convertToDto(entity.getDepotDeDepart()));
        }
        if (dto.getDepotDeDestination() != null) {
            dto.setDepotDeDestination(DepotStockageMapper.getInstance().convertToDto(entity.getDepotDeDestination()));
        }
        if (entity.getExercice() != null) {
            dto.setExercice(ExerciceMapper.getInstance().toDto(entity.getExercice()));
        }
        // dto.setStockDetail(StockDetailService.getAllOperationsDeStockDetailByIdOperation(entity.getId()));

        dto.setDateCreation(DateHelper.toText(entity.getDateCreation(), "time"));
        dto.setDateModification(DateHelper.toText(entity.getDateModification(), "time"));

        return dto;
    }
}
