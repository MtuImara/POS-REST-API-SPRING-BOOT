package pos.gescom.restApi.fichiersExploitations.exercice;

import jakarta.validation.ConstraintViolationException;
import pos.gescom.restApi.helpers.DateHelper;
import pos.gescom.restApi.helpers.MessageHelper;
import pos.gescom.restApi.helpers.PagingAndSortingHelper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Service;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.*;

@Service
public class ExcerciceService {

  @Autowired
  private ExerciceRepository exerciceRepo;

  private ExerciceDto getOne(Integer id, String code, String queryName) {
    ExerciceDto exercice = null;
    ExerciceEntity e = null;
    try {
      if (queryName.equals("find_by_id")) {
        e = exerciceRepo.getById(id);
      }

      if (queryName.equals("get_by_code")) {
        e = exerciceRepo.getByCode(code);
      }

      if (queryName.equals("first")) {
        e = exerciceRepo.getFirst();
      }

      if (queryName.equals("previous")) {
        e = exerciceRepo.getPrevious(id);
      }

      if (queryName.equals("last")) {
        e = exerciceRepo.getLast();
      }

      if (e != null) {
        exercice = ExerciceMapper.getInstance().toDto(e);
      }

    } catch (Exception exception) {
      System.out.println("erreur lors de la recuperation de l'exercice :" + exception.getMessage());
    }
    return exercice;
  }

  public ExerciceDto getById(int id) {
    return getOne(id, null, "find_by_id");
  }

  public ExerciceDto getByCode(String code) {
    return getOne(null, code, "get_by_code");
  }

  public ExerciceDto getFirst() {
    return getOne(null, null, "first");
  }

  public ExerciceDto getPrevious(Integer id) {
    return getOne(id, null, "previous");
  }

  public ExerciceDto getLast() {
    return getOne(null, null, "last");
  }

  public ExerciceDto close(int id) {
    ExerciceDto e = getById(id);
    if (e != null) {
      ExerciceEntity exercice = new ExerciceEntity();
      exercice.setDateCloture(DateHelper.now());
    }
    return null;
  }

  public List<ExerciceDto> getAll() {

    List<ExerciceEntity> exercices = exerciceRepo.findAll();
    List<ExerciceDto> eDtos = new ArrayList<>();
    for (ExerciceEntity exercice : exercices) {
      ExerciceDto eDto = ExerciceMapper.getInstance().toDto(exercice);
      eDtos.add(eDto);
    }
    return eDtos;
  }

  public ExerciceDto create(ExerciceDto exercice) {

    try {
      ExerciceEntity converted, created;
      converted = ExerciceMapper.getInstance().toEntity(exercice);
      converted.setDateCreation(DateHelper.now());
      created = exerciceRepo.save(converted);
      exercice = ExerciceMapper.getInstance().toDto(created);
    } catch (Exception e) {
      System.out.println("Erreur lors de la creation d'un exercice, " + e.getMessage());
    }
    return exercice;
  }

  public ExerciceDto getCourant() {
    ExerciceEntity exerciceActive = exerciceRepo.findActiveNotCloture();
    ExerciceDto courant = ExerciceMapper.getInstance().toDto(exerciceActive);
    return courant;
  }

  public ExerciceDto update(Integer id, ExerciceDto editedExercice) {
    try {

      ExerciceDto exercice = getById(id);
      ExerciceEntity converted, updated;

      converted = ExerciceMapper.getInstance().toEntity(exercice.modifyValues(editedExercice));
      updated = exerciceRepo.save(converted);
      editedExercice = ExerciceMapper.getInstance().toDto(updated);

    } catch (Exception e) {
      System.out.println("xxx" + e.getMessage());
      editedExercice = null;
    }
    return editedExercice;
  }

  public Map<String, Object> getAlls(String title, int page, int size, String[] sort) {

    Pageable pagingSort = PagingAndSortingHelper.pagination(sort, page, size);
    List<ExerciceEntity> lists = new ArrayList<>();
    Page<ExerciceEntity> pg = new PageImpl<>(lists);

    if (title == null || title.equals("")) {
      pg = exerciceRepo.findAll(pagingSort);
    }
    List<ExerciceDto> list = new ArrayList<>();
    pg.forEach(g -> {
      list.add(ExerciceMapper.getInstance().toDto(g));
    });
    Map<String, Object> dtos = new HashMap<>();

    dtos.put("currentPage", pg.getNumber() + 1);
    dtos.put("totalItems", pg.getTotalElements());
    dtos.put("totalPages", pg.getTotalPages());
    dtos.put("contents", list);

    return dtos;
  }
  // public boolean delete(Integer id) throws ConstraintViolationException,
  // NotFoundException {

  // ExerciceEntity exercice = null;
  // boolean deleted = false;
  // try {
  // exercice = exerciceRepo.findById(id)
  // .orElseThrow(() -> new NotFoundException(MessageHelper.notFound("" + id)));
  // exerciceRepo.delete(exercice);
  // deleted = true;
  // } catch (DataIntegrityViolationException e) {
  // System.out.println("Fail to remove caused by: " + e.getMessage());
  // throw new ConstraintViolationException(MessageHelper.unabletodelete(), null);
  // }

  // return deleted;
  // }
  public List<ExerciceDto> exerciceCloturerListes() {
    List<ExerciceEntity> clotureExercice = exerciceRepo.recupererByExerciceCloture();
    List<ExerciceDto> checkData = ExerciceMapper.getInstance().toDtoListes(clotureExercice);
    return checkData;
  }

  public Map<String, Object> exercicegetsoldes() {
    return null;
  }

  public void createdBy() {
    Date aujourdhui = new Date();
    SimpleDateFormat formater = null;
    formater = new SimpleDateFormat("yyyy");
    List<ExerciceDto> list = getAll();
    ExerciceDto exerciceDto = new ExerciceDto();
    exerciceDto.setCode(formater.format(aujourdhui));
    exerciceDto.setDesignation("Exercice " + formater.format(aujourdhui));
    exerciceDto.setCloture(false);
    exerciceDto.setDateCreation(DateHelper.toText(DateHelper.now()));
    LocalDate date1 = LocalDate.parse(DateHelper.toText(DateHelper.now()));
    Date date = new Date();
    Date dateDebut = new Date();
    Calendar c = Calendar.getInstance();
    c.setTime(date);
    c.add(Calendar.YEAR, 1);
    date = c.getTime();
    exerciceDto.setDateDebut(DateHelper.toText(dateDebut));
    exerciceDto.setDateFin(DateHelper.toText(date));
    exerciceDto.setReporter(false);
    exerciceDto.setExercicePrecedent(new ExerciceDto(0));
    ExerciceDto dto = !list.isEmpty() ? null : create(exerciceDto);
    dto = null;
  }
}
