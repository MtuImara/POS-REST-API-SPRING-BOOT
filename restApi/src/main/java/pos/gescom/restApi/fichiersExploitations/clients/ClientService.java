package pos.gescom.restApi.fichiersExploitations.clients;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import pos.gescom.restApi.helpers.DateHelper;
import pos.gescom.restApi.helpers.PagingAndSortingHelper;

@Service
public class ClientService {

    @Autowired
    private ClientRepository clientRepo;

    public Map<String, Object> getAll(String title, int page, int size, String[] sort,
            Specification<ClientEntity> clientSpec) {

        Pageable pagingSort = PagingAndSortingHelper.pagination(sort, page, size);

        Page<ClientEntity> clientEntity = null;

        if (title == null || title.equals("")) {
            clientEntity = clientRepo.findAll(clientSpec, pagingSort);
        } else {
        }

        List<ClientDto> dtos = new ArrayList<>();

        for (ClientEntity entities : clientEntity) {
            dtos.add(ClientMapper.getInstance().convertToDto(entities));
        }

        Map<String, Object> data = PagingAndSortingHelper.filteredAndSortedResult(
                clientEntity.getNumber(),
                clientEntity.getTotalElements(),
                clientEntity.getTotalPages(),
                dtos);

        return data;
    }

    public ClientDto getById(int id) {

        ClientEntity clientEntity = null;
        try {
            clientEntity = clientRepo.getById(id);
            ClientDto intervenantDto = ClientMapper.getInstance()
                    .convertToDto(clientEntity);
            return intervenantDto;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return null;
        }
    }

    public ClientDto ajoutClientService(ClientDto clientDto) {

        try {
            ClientEntity clientEntity = new ClientEntity();
            clientEntity = ClientMapper.getInstance()
                    .convertToEntity(clientDto);
            clientEntity.setDateCreation(DateHelper.now());
            ClientEntity creation = clientRepo.save(clientEntity);

            clientDto = creation != null
                    ? ClientMapper.getInstance().convertToDto(creation)
                    : null;
        } catch (Exception ex) {
            clientDto = null;
            System.out.println("null" + ex.getMessage());
        }

        return clientDto;
    }

    public ClientDto updateClientService(int id, ClientDto updated) {
        ClientEntity converted_clientEntity, updated_clientEntity = null;
        try {

            ClientDto clientDto = getById(id);
            converted_clientEntity = ClientMapper.getInstance()
                    .convertToEntity(clientDto.modifyValues(updated));
            converted_clientEntity.setDateModification(DateHelper.now());
            updated_clientEntity = clientRepo.save(converted_clientEntity);
            updated = ClientMapper.getInstance().convertToDto(updated_clientEntity);

        } catch (Exception e) {
            System.out.println("Erreur lors de la modification: " + e.getMessage());
            updated = null;
        }

        return updated;
    }

}
