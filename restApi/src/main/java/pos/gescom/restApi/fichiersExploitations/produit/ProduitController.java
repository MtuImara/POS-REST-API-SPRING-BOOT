package pos.gescom.restApi.fichiersExploitations.produit;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.http.MediaType;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;

import net.kaczmarzyk.spring.data.jpa.domain.LikeIgnoreCase;
import net.kaczmarzyk.spring.data.jpa.web.annotation.Spec;
import pos.gescom.restApi.helpers.FileHelper;
import pos.gescom.restApi.helpers.MessageHelper;
import pos.gescom.restApi.helpers.ResponseHelper;
import pos.gescom.restApi.uploadFiles.UploadFilesDto;
import net.kaczmarzyk.spring.data.jpa.web.annotation.Or;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/produit")
public class ProduitController {

    @Autowired
    private ProduitService produitService;

    @Autowired
    ProduitRepository produitRepository;

    @Autowired
    private FileHelper fileHelper;

    @RequestMapping(value = "/", method = RequestMethod.POST)
    public ResponseEntity<?> ajouterProduitController(@RequestBody ProduitDto dto) {

        ProduitEntity entity = ProduitMapper.getInstance()
                .convertToEntity(dto);

        if (produitRepository.existsByCode(entity.getCode())) {
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.dataExist("code"), true),
                    HttpStatus.BAD_REQUEST);
        } else {
            ProduitDto dtos = produitService
                    .ajoutProduitSansImageService(dto);
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.createdSuccessfully(), dtos, true),
                    HttpStatus.CREATED);
        }

    }

    @RequestMapping(value = "/{id}/upload/", method = RequestMethod.PUT)
    public ResponseEntity<?> uploadFiles(@PathVariable(name = "id", required = true) int id,
            ProduitDto record,
            @RequestParam("img") MultipartFile multipartFile,
            @RequestParam("file") MultipartFile[] multipartDoc) throws IOException {
        ProduitDto dto = produitService.attachFile(id, record, multipartFile, multipartDoc);

        try {

            if (dto != null) {
                return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), dto), HttpStatus.OK);
            }
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound()), HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.internalServer(e.getMessage()) + e),
                    HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/{id}/upload/{name}")
    public ResponseEntity<byte[]> getFileFacture(@PathVariable Long id, @PathVariable String name)
            throws IOException {
        String path = "Immo-Facture/" + id + "/" + name;
        byte[] imageBytes = fileHelper.getFile(path);
        return ResponseEntity.ok().contentType(MediaType.ALL).body(imageBytes);
    }

    @GetMapping("/upload/files")
    public ResponseEntity<List<UploadFilesDto>> getListFiles() {
        List<UploadFilesDto> fileInfos = fileHelper.loadAll().map(path -> {
            String filename = path.getFileName().toString();
            String url = MvcUriComponentsBuilder
                    .fromMethodName(ProduitController.class, "getFile", path.getFileName().toString()).build()
                    .toString();

            return new UploadFilesDto(filename, url);
        }).collect(Collectors.toList());

        return ResponseEntity.status(HttpStatus.OK).body(fileInfos);
    }

}
