package pos.gescom.restApi.fichiersExploitations.categorieProduit;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import pos.gescom.restApi.helpers.PagingAndSortingHelper;

@Service
public class CategorieService {

    @Autowired
    private CategorieRepository categorieRepo;

    public Map<String, Object> getAll(String title, int page, int size, String[] sort,
            Specification<CategorieEntity> specFamilleArticle) {

        Pageable pagingSort = PagingAndSortingHelper.pagination(sort, page, size);

        Page<CategorieEntity> familleEntity = null;

        if (title == null || title.equals("")) {
            familleEntity = categorieRepo.findAll(specFamilleArticle, pagingSort);
        } else {
        }

        List<CategorieDto> familleDtos = new ArrayList<>();

        for (CategorieEntity familleEntities : familleEntity) {
            familleDtos.add(CategorieMapper.getInstance().convertToDto(familleEntities));
        }

        Map<String, Object> data = PagingAndSortingHelper.filteredAndSortedResult(
                familleEntity.getNumber(),
                familleEntity.getTotalElements(),
                familleEntity.getTotalPages(),
                familleDtos);

        return data;
    }

    public CategorieDto getById(int id) {

        CategorieEntity entity = null;
        try {
            entity = categorieRepo.getById(id);
            CategorieDto dto = CategorieMapper.getInstance()
                    .convertToDto(entity);
            return dto;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return null;
        }
    }

    public CategorieDto ajoutCategorieService(CategorieDto categorieDto) {

        try {
            CategorieEntity familleArticleEntity = new CategorieEntity();
            familleArticleEntity = CategorieMapper.getInstance().convertToEntity(categorieDto);
            CategorieEntity creation = categorieRepo.save(familleArticleEntity);

            categorieDto = creation != null
                    ? CategorieMapper.getInstance().convertToDto(creation)
                    : null;
        } catch (Exception ex) {
            categorieDto = null;
            System.out.println("null" + ex.getMessage());
        }

        return categorieDto;
    }

    public CategorieDto updateCategorieService(int id, CategorieDto updated) {
        CategorieEntity converted_familleArticleEntity, updated_familleArticleEntity = null;
        try {

            CategorieDto dto = getById(id);
            converted_familleArticleEntity = CategorieMapper.getInstance()
                    .convertToEntity(dto.modifyValues(updated));
            // converted_familleArticleEntity.setDateModification(DateHelper.now());
            updated_familleArticleEntity = categorieRepo.save(converted_familleArticleEntity);
            updated = CategorieMapper.getInstance().convertToDto(updated_familleArticleEntity);

        } catch (Exception e) {
            System.out.println("Erreur lors de la modification de la Categorie des Produits: " + e.getMessage());
            updated = null;
        }

        return updated;
    }

}
