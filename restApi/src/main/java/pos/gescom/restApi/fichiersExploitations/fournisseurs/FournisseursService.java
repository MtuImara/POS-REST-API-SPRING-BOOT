package pos.gescom.restApi.fichiersExploitations.fournisseurs;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import pos.gescom.restApi.helpers.DateHelper;
import pos.gescom.restApi.helpers.PagingAndSortingHelper;

@Service
public class FournisseursService {

    @Autowired
    private FournisseursRepository fournisseursRepo;

    public Map<String, Object> getAll(String title, int page, int size, String[] sort,
            Specification<FournisseursEntity> fournisseursSpec) {

        Pageable pagingSort = PagingAndSortingHelper.pagination(sort, page, size);

        Page<FournisseursEntity> fournisseursEntity = null;

        if (title == null || title.equals("")) {
            fournisseursEntity = fournisseursRepo.findAll(fournisseursSpec, pagingSort);
        } else {
        }

        List<FournisseursDto> dtos = new ArrayList<>();

        for (FournisseursEntity entities : fournisseursEntity) {
            dtos.add(FournisseursMapper.getInstance().convertToDto(entities));
        }

        Map<String, Object> data = PagingAndSortingHelper.filteredAndSortedResult(
                fournisseursEntity.getNumber(),
                fournisseursEntity.getTotalElements(),
                fournisseursEntity.getTotalPages(),
                dtos);

        return data;
    }

    public FournisseursDto getById(int id) {

        FournisseursEntity fournisseursEntity = null;
        try {
            fournisseursEntity = fournisseursRepo.getById(id);
            FournisseursDto intervenantDto = FournisseursMapper.getInstance()
                    .convertToDto(fournisseursEntity);
            return intervenantDto;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return null;
        }
    }

    public FournisseursDto ajoutFournisseursService(FournisseursDto fournisseursDto) {

        try {
            FournisseursEntity fournisseursEntity = new FournisseursEntity();
            fournisseursEntity = FournisseursMapper.getInstance()
                    .convertToEntity(fournisseursDto);
            fournisseursEntity.setDateCreation(DateHelper.now());
            FournisseursEntity creation = fournisseursRepo.save(fournisseursEntity);

            fournisseursDto = creation != null
                    ? FournisseursMapper.getInstance().convertToDto(creation)
                    : null;
        } catch (Exception ex) {
            fournisseursDto = null;
            System.out.println("null" + ex.getMessage());
        }

        return fournisseursDto;
    }

    public FournisseursDto updateFournisseursService(int id, FournisseursDto updated) {
        FournisseursEntity converted_FournisseursEntity, updated_FournisseursEntity = null;
        try {

            FournisseursDto fournisseursDto = getById(id);
            converted_FournisseursEntity = FournisseursMapper.getInstance()
                    .convertToEntity(fournisseursDto.modifyValues(updated));
            converted_FournisseursEntity.setDateModification(DateHelper.now());
            updated_FournisseursEntity = fournisseursRepo.save(converted_FournisseursEntity);
            updated = FournisseursMapper.getInstance().convertToDto(updated_FournisseursEntity);

        } catch (Exception e) {
            System.out.println("Erreur lors de la modification: " + e.getMessage());
            updated = null;
        }

        return updated;
    }

}
