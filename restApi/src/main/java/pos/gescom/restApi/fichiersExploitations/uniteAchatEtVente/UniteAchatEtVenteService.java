package pos.gescom.restApi.fichiersExploitations.uniteAchatEtVente;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import pos.gescom.restApi.helpers.PagingAndSortingHelper;

@Service
public class UniteAchatEtVenteService {

    @Autowired
    private UniteAchatEtVenteRepository uniteRepo;

    public Map<String, Object> getAll(String title, int page, int size, String[] sort) {

        Pageable pagingSort = PagingAndSortingHelper.pagination(sort, page, size);

        Page<UniteAchatEtVenteEntity> uniteEntity = null;

        if (title == null || title.equals("")) {
            uniteEntity = uniteRepo.findAll(pagingSort);
        } else {
        }

        List<UniteAchatEtVenteDto> uniteDtos = new ArrayList<>();

        for (UniteAchatEtVenteEntity uniteEntities : uniteEntity) {
            uniteDtos.add(UniteAchatEtVenteMapper.getInstance().convertToDto(uniteEntities));
        }

        Map<String, Object> data = PagingAndSortingHelper.filteredAndSortedResult(
                uniteEntity.getNumber(),
                uniteEntity.getTotalElements(),
                uniteEntity.getTotalPages(),
                uniteDtos);

        return data;
    }

    public UniteAchatEtVenteDto getById(int id) {

        UniteAchatEtVenteEntity uniteEntity = null;
        try {
            uniteEntity = uniteRepo.getById(id);
            UniteAchatEtVenteDto uniteDto = UniteAchatEtVenteMapper.getInstance()
                    .convertToDto(uniteEntity);
            return uniteDto;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return null;
        }
    }

    public UniteAchatEtVenteDto ajoutUniteAchatVenteService(UniteAchatEtVenteDto uniteDto) {

        try {
            UniteAchatEtVenteEntity uniteEntity = new UniteAchatEtVenteEntity();
            uniteEntity = UniteAchatEtVenteMapper.getInstance().convertToEntity(uniteDto);
            UniteAchatEtVenteEntity creation = uniteRepo.save(uniteEntity);

            uniteDto = creation != null
                    ? UniteAchatEtVenteMapper.getInstance().convertToDto(creation)
                    : null;
        } catch (Exception ex) {
            uniteDto = null;
            System.out.println("null" + ex.getMessage());
        }

        return uniteDto;
    }

    public UniteAchatEtVenteDto updateUniteAchatVenteService(int id, UniteAchatEtVenteDto updated) {
        UniteAchatEtVenteEntity converted_uniteEntity, updated_uniteEntity = null;
        try {

            UniteAchatEtVenteDto dto = getById(id);
            converted_uniteEntity = UniteAchatEtVenteMapper.getInstance()
                    .convertToEntity(dto.modifyValues(updated));
            // converted_familleArticleEntity.setDateModification(DateHelper.now());
            updated_uniteEntity = uniteRepo.save(converted_uniteEntity);
            updated = UniteAchatEtVenteMapper.getInstance().convertToDto(updated_uniteEntity);

        } catch (Exception e) {
            System.out.println("Erreur lors de la modification de l'Unite d'Achat et de Vente': " + e.getMessage());
            updated = null;
        }

        return updated;
    }

}
