package pos.gescom.restApi.fichiersExploitations.produit;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import pos.gescom.restApi.constantes.StaticListOfValues;
import pos.gescom.restApi.constantes.StaticValue;
import pos.gescom.restApi.depotStockage.DepotStockageDto;
import pos.gescom.restApi.fichiersExploitations.categorieProduit.CategorieDto;
import pos.gescom.restApi.fichiersExploitations.categorieProduit.CategorieMapper;
import pos.gescom.restApi.fichiersExploitations.uniteAchatEtVente.UniteAchatEtVenteDto;
import pos.gescom.restApi.fichiersExploitations.uniteAchatEtVente.UniteAchatEtVenteMapper;
import pos.gescom.restApi.helpers.DateHelper;
import pos.gescom.restApi.uploadFiles.UploadFilesDto;
import pos.gescom.restApi.uploadFiles.UploadFilesEntity;

public class ProduitMapper {

    public ProduitMapper() {
    }

    public static ProduitMapper getInstance() {
        return new ProduitMapper();
    }

    public ProduitEntity convertToEntity(ProduitDto dto) {

        ProduitEntity entity = new ProduitEntity();

        entity.setId(dto.getId());
        entity.setCode(dto.getCode());
        entity.setDesignation(dto.getDesignation());
        entity.setPrixVenteUnitHT(dto.getPrixVenteUnitHT());
        entity.setPrixVenteUnitTtc(dto.getPrixVenteUnitTtc());
        entity.setPrixAchat(dto.getPrixAchat());
        entity.setCoefficientVente(dto.getCoefficientVente());

        // if (dto.getCoefficientVente() != null || dto.getCoefficientVente() != 0.0) {
        // entity.setPrixVente(dto.getPrixAchat() * dto.getCoefficientVente());
        // } else {
        // entity.setPrixVente(dto.getPrixVente());
        // }

        entity.setSeuilMinimal(dto.getSeuilMinimal());
        entity.setSeuilMaximal(dto.getSeuilMaximal());
        entity.setKitArticle(dto.getKitArticle());
        entity.setIconeArticle(dto.getIconeArticle());
        entity.setCodeBarre(dto.getCodeBarre());

        if (dto.getCategorieProduit() != null) {
            entity.setIdCategorie(dto.getCategorieProduit().getId());
        }
        if (dto.getUniteAchat() != null) {
            entity.setIdUniteAchat(dto.getUniteAchat().getId());
        }
        if (dto.getUniteVente() != null) {
            entity.setIdUniteVente(dto.getUniteVente().getId());
        }
        if (dto.getDepotStockage() != null) {
            entity.setIdDepot(dto.getDepotStockage().getId());
        }

        return entity;
    }

    // public UploadFilesDto convertAttachementEntityToDTO(
    // UploadFilesEntity entity) {
    // UploadFilesDto dto = modelMapper.map(entity, UploadFilesDto.class);
    // dto.setPath(ServletUriComponentsBuilder.fromCurrentContextPath().build().toUriString()
    // + "/Image-Produit/" + entity.getIdImageProduit() + "/" +
    // entity.getNomFichier());
    // return dto;
    // }

    public UploadFilesDto convertAttachementEntityToDTO(UploadFilesEntity entity) {

        UploadFilesDto dto = new UploadFilesDto();
        dto.setNomFichier(entity.getNomFichier());
        dto.setPath(ServletUriComponentsBuilder.fromCurrentContextPath().build().toUriString() + "/Image-Produit/"
                + entity.getIdImageProduit() + "/upload/" + entity.getNomFichier() + "/");

        return dto;
    }

    public ProduitDto convertToDto(ProduitEntity entity) {
        ProduitDto dto = new ProduitDto();

        dto.setId(entity.getId());
        dto.setCode(entity.getCode());
        dto.setDesignation(entity.getDesignation());
        dto.setPrixVenteUnitHT(entity.getPrixVenteUnitHT());
        dto.setPrixVenteUnitTtc(entity.getPrixVenteUnitTtc());
        dto.setPrixAchat(entity.getPrixAchat());
        dto.setCoefficientVente(entity.getCoefficientVente());
        // if (entity.getCoefficientVente() != null || entity.getCoefficientVente() !=
        // 0.0) {
        // entity.setPrixVente(dto.getPrixAchat() * dto.getCoefficientVente());
        // } else {
        // entity.setPrixVente(dto.getPrixVente());
        // }
        // dto.setPrixVente(entity.getPrixVente());
        dto.setSeuilMinimal(entity.getSeuilMinimal());
        dto.setSeuilMaximal(entity.getSeuilMaximal());
        dto.setKitArticle(entity.getKitArticle());

        if (entity.getCategorieProduit() != null) {
            dto.setCategorieProduit(CategorieMapper.getInstance().convertToDto(entity.getCategorieProduit()));
        } else {
            dto.setCategorieProduit(null);
        }
        if (entity.getUniteAchat() != null) {
            dto.setUniteAchat(UniteAchatEtVenteMapper.getInstance()
                    .convertToDto(entity.getUniteAchat()));
        } else {
            dto.setUniteAchat(null);
        }
        if (entity.getUniteVente() != null) {
            dto.setUniteVente(UniteAchatEtVenteMapper.getInstance()
                    .convertToDto(entity.getUniteVente()));
        } else {
            dto.setUniteVente(null);
        }

        if (entity.getAttachementFiles() != null) {
            dto.setFileAttachement(
                    entity.getAttachementFiles().stream().map(this::convertAttachementEntityToDTO)
                            .collect(Collectors.toList()));
        } else {
            dto.setFileAttachement(null);
        }

        dto.setDateCreation(DateHelper.toText(entity.getDateCreation(), "time"));
        dto.setDateModification(DateHelper.toText(entity.getDateModification(), "time"));

        return dto;
    }
}
