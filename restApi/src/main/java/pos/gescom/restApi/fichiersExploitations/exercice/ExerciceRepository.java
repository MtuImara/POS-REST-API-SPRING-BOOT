package pos.gescom.restApi.fichiersExploitations.exercice;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;

public interface ExerciceRepository extends JpaRepository<ExerciceEntity, Integer> {

  @Query("select e from Exercice e where e.code =:code")
  ExerciceEntity getByCode(@Param("code") String code);

  @Query("select e FROM Exercice e WHERE e.id = (SELECT min(e.id) FROM Exercice e)")
  ExerciceEntity getFirst();

  @Query("SELECT  count(e) > 0 FROM Exercice e WHERE  e.cloture=false ")
  boolean verifierExerciceExist();

  @Query(value = "SELECT * FROM tbl_exercices WHERE id NOT(?1) ORDER BY id DESC LIMIT 1", nativeQuery = true)
  ExerciceEntity getPrevious(Integer id);

  @Query("SELECT e FROM Exercice e ORDER BY e.id DESC LIMIT 1")
  ExerciceEntity getLast();

  @Query("SELECT  count(e) > 0  FROM Exercice e WHERE  e.cloture=false AND e.id=?1")
  Boolean verifierExerciceClose(Integer id);

  @Query(value = "SELECT * FROM tbl_exercices WHERE cloture = 0 ORDER BY id DESC LIMIT 1", nativeQuery = true)
  ExerciceEntity findActiveNotCloture();

  @Query("SELECT e FROM Exercice e WHERE  e.cloture=true ")
  List<ExerciceEntity> recupererByExerciceCloture();

  @Query("SELECT e FROM Exercice e WHERE  e.code=:code")
  Optional<ExerciceEntity> getcode(@Param("code") String code);

}
