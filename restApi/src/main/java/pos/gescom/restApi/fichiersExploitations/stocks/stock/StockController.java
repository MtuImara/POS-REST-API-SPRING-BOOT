package pos.gescom.restApi.fichiersExploitations.stocks.stock;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import lombok.RequiredArgsConstructor;
import pos.gescom.restApi.constantes.StaticValue;
import pos.gescom.restApi.fichiersExploitations.stocks.stockDetail.StockDetailService;
import pos.gescom.restApi.helpers.MessageHelper;
import pos.gescom.restApi.helpers.ResponseHelper;

@CrossOrigin(origins = "*")
@RestController
@RequiredArgsConstructor
@RequestMapping("/gestion_stock")
public class StockController {

    private final StockRepository stockRepository;

    private final StockService stockService;

    private final StockDetailService stockDetailService;

    @GetMapping(value = "/type_operation_stock")
    public ResponseEntity<?> getTypeSuivieStock() {
        List<StaticValue> types = stockService.typeDeMouvements();
        if (types.isEmpty()) {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.noContent(), false), HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), types, true), HttpStatus.OK);
    }

    @GetMapping(value = "/type_de_statut_operation_stock")
    public ResponseEntity<?> getTypeStatut() {
        List<StaticValue> types = stockService.typeStatut();
        if (types.isEmpty()) {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.noContent(), false), HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), types, true), HttpStatus.OK);
    }

    @GetMapping(value = "/")
    public ResponseEntity<?> getAllController(@RequestParam(required = false) String title,
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id,desc") String[] sort) {

        Map<String, Object> mouvementsDeStock = stockService.getAll(title, page - 1, size,
                sort);

        if (mouvementsDeStock.size() > 0) {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), mouvementsDeStock, true),
                    HttpStatus.OK);

        } else {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.noContent()), HttpStatus.OK);
        }
    }

    @GetMapping(value = "/{id}")
    public ResponseEntity<?> getByIdController(
            @PathVariable(name = "id", required = true) int id) {
        StockDto dto = stockService.getById(id);
        if (dto != null) {
            return new ResponseEntity<>(new ResponseHelper(dto, true), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound(), false),
                    HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping(value = "/seclect_by_exercice/{idExercice}")
    public ResponseEntity<?> getAllByExerciceComptableController(@RequestParam(required = false) String title,
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id,desc") String[] sort,
            @PathVariable(name = "idExercice", required = true) int idExercice) {
        Map<String, Object> dto = stockService.getAllByIdExerciceComptable(title, page - 1, size,
                sort, idExercice);
        if (dto != null) {
            return new ResponseEntity<>(new ResponseHelper(dto, true), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound(), false),
                    HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping(value = "/seclect_by_id_and_exercice/{id}")
    public ResponseEntity<?> getByIdAndExerciceComptableController(@PathVariable(name = "id", required = true) int id,
            @RequestParam(required = true) Integer idExercice
    // @PathVariable(name = "idExercice", required = true) int idExercice
    ) {
        List<StockDto> dto = stockService.getAllByIdEtIdExerciceComptable(id, idExercice);
        if (dto != null) {
            return new ResponseEntity<>(new ResponseHelper(dto, true), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound(), false),
                    HttpStatus.NOT_FOUND);
        }
    }

    @GetMapping(value = "/seclect_by_typeDeMouvement_and_exercice/")
    public ResponseEntity<?> getByTypeDeMouvementEtExerciceComptableController(
            @RequestParam(required = false) String title,
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id,desc") String[] sort,
            @RequestParam(required = true) int idExercice,
            @RequestParam(required = true) int typeMouvement) {

        Map<String, Object> dto = stockService
                .getAllByTypeMouvementAndIdExerciceComptable(title, page - 1, size,
                        sort, idExercice, typeMouvement);
        if (dto != null) {
            return new ResponseEntity<>(new ResponseHelper(dto, true), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound(), false),
                    HttpStatus.NOT_FOUND);
        }
    }

    // @GetMapping(value = "/seclect_cump_par_article")
    // public ResponseEntity<?> getCumpParArticleController(@RequestParam(required =
    // true) Integer idArticle,
    // @RequestParam(required = true) Integer idExercice) {
    // Double cump = stockService.calculDuCumpDuJour(idArticle, idExercice);
    // if (cump != null) {
    // return new ResponseEntity<>(new ResponseHelper(cump, true), HttpStatus.OK);
    // } else {
    // return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound(),
    // false),
    // HttpStatus.NOT_FOUND);
    // }
    // }

    // @GetMapping(value = "/seclect_quantite_en_stock_par_article")
    // public ResponseEntity<?>
    // getQuantiteEnStockParArticleController(@RequestParam(required = true) Integer
    // idArticle,
    // @RequestParam(required = true) Integer idExercice) {
    // Double quantite = stockService.calculDuQuantiteEnStockDuJour(idArticle,
    // idExercice);
    // if (quantite != null) {
    // return new ResponseEntity<>(new ResponseHelper(quantite, true),
    // HttpStatus.OK);
    // } else {
    // return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound(),
    // false),
    // HttpStatus.NOT_FOUND);
    // }
    // }

    @PostMapping(value = "/")
    public ResponseEntity<?> ajouterStockController(@RequestBody StockDto dto) {

        StockEntity entity = StockMapper.getInstance()
                .convertToEntity(dto);

        if (stockRepository.existsByCode(entity.getCode())) {
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.dataExist("code"), false),
                    HttpStatus.BAD_REQUEST);
        } else {
            StockDto mouvementsDeStockDtos = stockService
                    .ajoutMouvementsDeStockService(dto);
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.createdSuccessfully(), mouvementsDeStockDtos, true),
                    HttpStatus.CREATED);
        }

    }

    @PostMapping(value = "/mouvement_de_sortie")
    public ResponseEntity<?> ajouterMouvementsDeSortieEnStockController(@RequestBody StockDto dto) {

        StockEntity entity = StockMapper.getInstance()
                .convertToEntity(dto);

        if (stockRepository.existsByCode(entity.getCode())) {
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.dataExist("code"), false),
                    HttpStatus.BAD_REQUEST);
        } else {
            StockDto mouvementsDeStockDtos = stockService
                    .ajoutMouvementsDeStockService(dto);
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.createdSuccessfully(), mouvementsDeStockDtos, true),
                    HttpStatus.CREATED);
        }

    }

    @PutMapping(value = "/{id}")
    public ResponseEntity<?> modifierMouvementsDeStockController(@PathVariable(name = "id", required = true) int id,
            @RequestBody StockDto dto) {

        Optional<StockEntity> mouvementsDeStockIdOptional = stockRepository.findById(id);

        Optional<StockEntity> codeExist = stockRepository.verificationCode(id,
                dto.getCode());

        if (mouvementsDeStockIdOptional.isPresent()) {

            if (codeExist.isPresent()) {
                return new ResponseEntity<>(
                        new ResponseHelper(("code " + dto.getCode() + " exist"), false),
                        HttpStatus.BAD_REQUEST);
            } else {
                StockDto mouvementsDeStockDto = stockService.updateMouvementsDeStockService(id,
                        dto);

                return new ResponseEntity<>(
                        new ResponseHelper(MessageHelper.updatedSuccessfully("Mouvements De Stock"),
                                mouvementsDeStockDto,
                                true),
                        HttpStatus.OK);
            }

        } else {
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.notFound("id: " + id), false),
                    HttpStatus.NOT_FOUND);
        }
    }

}
