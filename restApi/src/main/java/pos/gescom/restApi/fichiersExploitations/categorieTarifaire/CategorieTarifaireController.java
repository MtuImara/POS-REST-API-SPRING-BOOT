package pos.gescom.restApi.fichiersExploitations.categorieTarifaire;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import net.kaczmarzyk.spring.data.jpa.domain.LikeIgnoreCase;
import net.kaczmarzyk.spring.data.jpa.web.annotation.Spec;
import pos.gescom.restApi.helpers.MessageHelper;
import pos.gescom.restApi.helpers.ResponseHelper;
import net.kaczmarzyk.spring.data.jpa.web.annotation.Or;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/categorie_tarifaire")
public class CategorieTarifaireController {

    @Autowired
    private CategorieTarifaireService service;

    @Autowired
    CategorieTarifaireRepository repository;

    @RequestMapping(value = "/", method = RequestMethod.GET)
    public ResponseEntity<?> getAllCategorieTarifaireController(@RequestParam(required = false) String title,
            @RequestParam(defaultValue = "1") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id,desc") String[] sort,
            @Or({
                    @Spec(path = "code", params = "name", spec = LikeIgnoreCase.class),
                    @Spec(path = "designation", params = "name", spec = LikeIgnoreCase.class) }) Specification<CategorieTarifaireEntity> tarifSpec) {

        Map<String, Object> tarif = service.getAll(title, page - 1, size, sort, tarifSpec);

        if (tarif.size() > 0) {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), tarif, true),
                    HttpStatus.OK);

        } else {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.noContent()), HttpStatus.OK);
        }
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public ResponseEntity<?> getByIdCategorieTarifaireController(
            @PathVariable(name = "id", required = true) int id) {
        CategorieTarifaireDto dto = service.getById(id);
        if (dto != null) {
            return new ResponseEntity<>(new ResponseHelper(dto, true), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper.notFound(), false),
                    HttpStatus.NOT_FOUND);
        }
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    public ResponseEntity<?> ajouterCategorieTarifaireController(
            @RequestBody CategorieTarifaireDto dto) {

        CategorieTarifaireEntity entity = CategorieTarifaireMapper.getInstance()
                .convertToEntity(dto);

        if (repository.existsByCode(entity.getCode())) {
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.dataExist("Code"), true),
                    HttpStatus.BAD_REQUEST);
        } else {
            CategorieTarifaireDto dtos = service.ajoutCategorieTarifaireService(dto);
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.createdSuccessfully(), dtos, true),
                    HttpStatus.CREATED);
        }

    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    public ResponseEntity<?> modifierCategorieTarifaireController(
            @PathVariable(name = "id", required = true) int id,
            @RequestBody CategorieTarifaireDto dto) {

        Optional<CategorieTarifaireEntity> idOptional = repository.findById(id);

        Optional<CategorieTarifaireEntity> codeExist = repository.verificationCode(id,
                dto.getCode());

        if (idOptional.isPresent()) {

            if (codeExist.isPresent()) {
                return new ResponseEntity<>(
                        new ResponseHelper(("Code " + dto.getCode() + " exist"), true),
                        HttpStatus.BAD_REQUEST);
            } else {
                CategorieTarifaireDto dto2 = service.updateFamilleArticleService(id,
                        dto);

                return new ResponseEntity<>(
                        new ResponseHelper(MessageHelper.updatedSuccessfully("Catégorie Tarifaire"), dto2,
                                true),
                        HttpStatus.OK);
            }

        } else {
            return new ResponseEntity<>(
                    new ResponseHelper(MessageHelper.notFound("Catégorie avec id: " + id), false),
                    HttpStatus.NOT_FOUND);
        }
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public ResponseEntity<?> supprimerCategorieTarifaireController(@PathVariable("id") int id) {
        Optional<CategorieTarifaireEntity> idOptional = repository.findById(id);

        try {
            if (idOptional.isPresent()) {
                repository.deleteById(id);
                return new ResponseEntity<>(new ResponseHelper(MessageHelper.success(), true), HttpStatus.OK);
            } else {
                return new ResponseEntity<>(new ResponseHelper(
                        MessageHelper.notFound("ID"), false), HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            return new ResponseEntity<>(new ResponseHelper(MessageHelper
                    .internalServer(), false),
                    HttpStatus.INTERNAL_SERVER_ERROR);
        }

    }

}
