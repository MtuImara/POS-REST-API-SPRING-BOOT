package pos.gescom.restApi.fichiersExploitations.exercice;

import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;

import pos.gescom.restApi.helpers.DateHelper;

import java.util.List;

@Component
public class ExerciceMapper {

  private ExerciceMapper() {
  }

  public static ExerciceMapper getInstance() {
    return new ExerciceMapper();
  }

  public ExerciceEntity toEntity(ExerciceDto e) {

    ExerciceEntity exercice = new ExerciceEntity();
    exercice.setDateCreation(DateHelper.now());
    exercice.setDateCloture(DateHelper.toDate(e.getDateCloture()));
    exercice.setDateDebut(DateHelper.toDate(e.getDateDebut()));
    exercice.setDateFin(DateHelper.toDate(e.getDateFin()));
    exercice.setDateOuverture(DateHelper.toDate(e.getDateOuverture()));
    exercice.setDesignation(e.getDesignation());
    exercice.setCode(e.getCode());
    exercice.setCloture(false);
    // if (e.getUtilisateurCreation() != null) {
    // exercice.setIdUtilisateurCreation(e.getUtilisateurCreation().getId());
    // }
    if (e.getExercicePrecedent() != null) {
      exercice.setIdExercicePrcd(e.getExercicePrecedent().getId());
    }
    return exercice;
  }

  public ExerciceDto toDto(ExerciceEntity exercice) {
    ExerciceDto e = new ExerciceDto();
    e.setExercicePrecedent(
        exercice != null && exercice.getPrecedent() != null
            ? ExerciceMapper.getInstance().toDto(exercice.getPrecedent())
            : null);
    e.setCode(exercice.getCode());
    e.setDateCloture(DateHelper.toText(exercice.getDateCloture(), "time"));
    e.setDateCreation(DateHelper.toText(exercice.getDateCreation(), "time"));
    e.setDateDebut(DateHelper.toText(exercice.getDateDebut(), "time"));
    e.setDateFin(DateHelper.toText(exercice.getDateFin(), "time"));
    e.setDateOuverture(DateHelper.toText(exercice.getDateOuverture(), "time"));
    e.setDesignation(exercice.getDesignation());
    e.setCloture(exercice.isCloture());
    e.setId(exercice.getId());
    return e;
  }

  public List<ExerciceDto> toDtos(Page<ExerciceEntity> page) {
    List<ExerciceDto> exercices = page.stream().map(this::toDto).toList();
    return exercices;
  }

  public List<ExerciceDto> toDtoListes(List<ExerciceEntity> clotureExercice) {
    List<ExerciceDto> exercices = clotureExercice.stream().map(this::toDto).toList();
    return exercices;
  }
}
